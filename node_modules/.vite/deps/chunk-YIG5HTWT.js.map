{
  "version": 3,
  "sources": ["../../@restart/hooks/esm/useMergedRefs.js", "../../@babel/runtime/helpers/esm/inheritsLoose.js"],
  "sourcesContent": ["import { useMemo } from 'react';\n\nvar toFnRef = function toFnRef(ref) {\n  return !ref || typeof ref === 'function' ? ref : function (value) {\n    ref.current = value;\n  };\n};\n\nexport function mergeRefs(refA, refB) {\n  var a = toFnRef(refA);\n  var b = toFnRef(refB);\n  return function (value) {\n    if (a) a(value);\n    if (b) b(value);\n  };\n}\n/**\n * Create and returns a single callback ref composed from two other Refs.\n *\n * ```tsx\n * const Button = React.forwardRef((props, ref) => {\n *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();\n *   const mergedRef = useMergedRefs(ref, attachRef);\n *\n *   return <button ref={mergedRef} {...props}/>\n * })\n * ```\n *\n * @param refA A Callback or mutable Ref\n * @param refB A Callback or mutable Ref\n * @category refs\n */\n\nfunction useMergedRefs(refA, refB) {\n  return useMemo(function () {\n    return mergeRefs(refA, refB);\n  }, [refA, refB]);\n}\n\nexport default useMergedRefs;", "import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}"],
  "mappings": ";;;;;;;;;;;AAAA,mBAAwB;AAExB,IAAI,UAAU,SAASA,SAAQ,KAAK;AAClC,SAAO,CAAC,OAAO,OAAO,QAAQ,aAAa,MAAM,SAAU,OAAO;AAChE,QAAI,UAAU;AAAA,EAChB;AACF;AAEO,SAAS,UAAU,MAAM,MAAM;AACpC,MAAI,IAAI,QAAQ,IAAI;AACpB,MAAI,IAAI,QAAQ,IAAI;AACpB,SAAO,SAAU,OAAO;AACtB,QAAI;AAAG,QAAE,KAAK;AACd,QAAI;AAAG,QAAE,KAAK;AAAA,EAChB;AACF;AAkBA,SAAS,cAAc,MAAM,MAAM;AACjC,aAAO,sBAAQ,WAAY;AACzB,WAAO,UAAU,MAAM,IAAI;AAAA,EAC7B,GAAG,CAAC,MAAM,IAAI,CAAC;AACjB;AAEA,IAAO,wBAAQ;;;ACtCA,SAAR,eAAgC,UAAU,YAAY;AAC3D,WAAS,YAAY,OAAO,OAAO,WAAW,SAAS;AACvD,WAAS,UAAU,cAAc;AACjC,kBAAe,UAAU,UAAU;AACrC;",
  "names": ["toFnRef"]
}
